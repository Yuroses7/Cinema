// server/controllers/movieController.ts
import { Request, Response } from 'express';
import mysql from 'mysql2/promise';
import { ResultSetHeader } from 'mysql2';
// Database connection configuration
const dbConfig = {
  host: process.env.DB_HOST || 'localhost',
  port: parseInt(process.env.DB_PORT || '3306'),
  user: process.env.DB_USER || 'root',
  password: process.env.DB_PASSWORD || '',
  database: process.env.DB_NAME || 'movie_booking'
};

// ‡∏™‡∏£‡πâ‡∏≤‡∏á connection pool - ‡∏•‡∏ö properties ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÉ‡∏ô mysql2 v3.6.5
const poolOptions: mysql.PoolOptions = {
  host: dbConfig.host,
  port: dbConfig.port,
  user: dbConfig.user,
  password: dbConfig.password,
  database: dbConfig.database,
  waitForConnections: true,
  connectionLimit: 10,
  queueLimit: 0
};

const pool = mysql.createPool(poolOptions);

// Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Movie
interface Movie {
  id: number;
  title: string;
  description: string;
  poster_url: string;
}

// Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API Response
interface ApiResponse<T> {
  success: boolean;
  message: string;
  movies: T[];
  count: number;
}

/**
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 */
export const getMovies = async (req: Request, res: Response): Promise<void> => {
  try {
    console.log('üé¨ [Controller] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡∏£‡πå‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...');
    
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö connection ‡∏Å‡πà‡∏≠‡∏ô
    const connection = await pool.getConnection();
    console.log('‚úÖ [DB] ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    
    try {
      // Query ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡∏£‡πå
      const [rows] = await connection.execute<mysql.RowDataPacket[]>(
        'SELECT id, title, description, poster_url FROM movies ORDER BY id ASC'
      );
      
      console.log('üìä [DB] ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡∏£‡πå‡∏ó‡∏µ‡πà‡∏û‡∏ö:', rows.length);
      
      if (rows.length === 0) {
        console.log('‚ö†Ô∏è [DB] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡∏£‡πå‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const [tableCheck] = await connection.execute<mysql.RowDataPacket[]>(
          'SHOW TABLES LIKE "movies"'
        );
        
        if (tableCheck.length === 0) {
          res.status(500).json({
            success: false,
            message: '‡∏ï‡∏≤‡∏£‡∏≤‡∏á movies ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
            movies: [],
            count: 0
          } as ApiResponse<Movie>);
          return;
        }
        
        res.status(200).json({
          success: true,
          message: '‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡∏£‡πå',
          movies: [],
          count: 0
        } as ApiResponse<Movie>);
        return;
      }

      // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô Movie interface
      const movies: Movie[] = rows.map((row: mysql.RowDataPacket) => ({
        id: row.id,
        title: row.title || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡∏£‡πå',
        description: row.description || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢',
        poster_url: row.poster_url || 'https://via.placeholder.com/300x450/1a1a1a/ffffff?text=‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏û'
      }));

      console.log('‚úÖ [Controller] ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', movies.length, '‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á');
      console.log('üé≠ [Data] ‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡∏£‡πå:', movies.map(m => `${m.id}: ${m.title}`));

      res.status(200).json({
        success: true,
        message: '‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        movies: movies,
        count: movies.length
      } as ApiResponse<Movie>);

    } finally {
      // ‡∏Ñ‡∏∑‡∏ô connection ‡∏Å‡∏•‡∏±‡∏ö pool
      connection.release();
    }

  } catch (error) {
    console.error('‚ùå [Controller] ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡∏£‡πå:', error);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á error
    let errorMessage = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•';
    
    if (error instanceof Error) {
      if (error.message.includes('ECONNREFUSED')) {
        errorMessage = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ';
      } else if (error.message.includes('Access denied')) {
        errorMessage = '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
      } else if (error.message.includes('Unknown database')) {
        errorMessage = '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏';
      } else {
        errorMessage = error.message;
      }
    }

    res.status(500).json({
      success: false,
      message: errorMessage,
      movies: [],
      count: 0,
      error: process.env.NODE_ENV === 'development' ? error : undefined
    } as ApiResponse<Movie> & { error?: any });
  }
};

/**
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡∏£‡πå‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
 */
export const getMovieById = async (req: Request, res: Response): Promise<void> => {
  try {
    const movieId = parseInt(req.params.id);
    
    if (isNaN(movieId)) {
      res.status(400).json({
        success: false,
        message: '‡∏£‡∏´‡∏±‡∏™‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡∏£‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'
      });
      return;
    }

    console.log('üé¨ [Controller] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡∏£‡πå ID:', movieId);
    
    const connection = await pool.getConnection();
    
    try {
      const [rows] = await connection.execute<mysql.RowDataPacket[]>(
        'SELECT id, title, description, poster_url FROM movies WHERE id = ?',
        [movieId]
      );
      
      if (rows.length === 0) {
        res.status(404).json({
          success: false,
          message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡∏£‡πå‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏'
        });
        return;
      }

      const movie: Movie = {
        id: rows[0].id,
        title: rows[0].title,
        description: rows[0].description,
        poster_url: rows[0].poster_url
      };

      console.log('‚úÖ [Controller] ‡∏û‡∏ö‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡∏£‡πå:', movie.title);

      res.status(200).json({
        success: true,
        message: '‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        data: movie
      });

    } finally {
      connection.release();
    }

  } catch (error) {
    console.error('‚ùå [Controller] ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡∏£‡πå:', error);
    
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡∏£‡πå',
      error: process.env.NODE_ENV === 'development' ? error : undefined
    });
  }
};

/**
 * ‡∏î‡∏∂‡∏á‡∏£‡∏≠‡∏ö‡∏â‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡∏£‡πå
 */
export const getMovieShowtimes = async (req: Request, res: Response): Promise<void> => {
  try {
    const movieId = parseInt(req.params.id);
    
    if (isNaN(movieId)) {
      res.status(400).json({
        success: false,
        message: '‡∏£‡∏´‡∏±‡∏™‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡∏£‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'
      });
      return;
    }

    console.log('üïê [Controller] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏£‡∏≠‡∏ö‡∏â‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡∏£‡πå ID:', movieId);
    
    const connection = await pool.getConnection();
    
    try {
      const query = `
        SELECT 
          s.id,
          s.time,
          m.title as movie_title,
          m.id as movie_id
        FROM showtimes s
        JOIN movies m ON s.movie_id = m.id
        WHERE s.movie_id = ?
        ORDER BY s.time ASC
      `;
      
      const [rows] = await connection.execute<mysql.RowDataPacket[]>(query, [movieId]);
      
      console.log('üìä [DB] ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≠‡∏ö‡∏â‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏û‡∏ö:', rows.length);

      res.status(200).json({
        success: true,
        message: '‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≠‡∏ö‡∏â‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        data: rows,
        count: rows.length
      });

    } finally {
      connection.release();
    }

  } catch (error) {
    console.error('‚ùå [Controller] ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏£‡∏≠‡∏ö‡∏â‡∏≤‡∏¢:', error);
    
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏£‡∏≠‡∏ö‡∏â‡∏≤‡∏¢',
      error: process.env.NODE_ENV === 'development' ? error : undefined
    });
  }
};
// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÉ‡∏ô movieController.ts

/**
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 */
export const getSeats = async (req: Request, res: Response): Promise<void> => {
  try {
    console.log('üí∫ [Controller] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á...');
    
    const connection = await pool.getConnection();
    
    try {
      const [rows] = await connection.execute<mysql.RowDataPacket[]>(
        'SELECT id, row_letter, seat_number, seat_type, price FROM seats ORDER BY row_letter, seat_number'
      );
      
      console.log('üìä [DB] ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏ö:', rows.length);

      res.status(200).json({
        success: true,
        message: '‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        data: rows,
        count: rows.length
      });

    } finally {
      connection.release();
    }

  } catch (error) {
    console.error('‚ùå [Controller] ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á:', error);
    
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á',
      error: process.env.NODE_ENV === 'development' ? error : undefined
    });
  }
};

/**
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏ö‡∏â‡∏≤‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞ (‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ß‡πà‡∏≤‡∏à‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á)
 */
export const getShowtimeSeats = async (req: Request, res: Response): Promise<void> => {
  try {
    const showtimeId = parseInt(req.params.showtimeId);
    
    if (isNaN(showtimeId)) {
      res.status(400).json({
        success: false,
        message: '‡∏£‡∏´‡∏±‡∏™‡∏£‡∏≠‡∏ö‡∏â‡∏≤‡∏¢‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'
      });
      return;
    }

    console.log('üí∫ [Controller] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏ö‡∏â‡∏≤‡∏¢ ID:', showtimeId);
    
    const connection = await pool.getConnection();
    
    try {
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
      const query = `
        SELECT 
          s.id,
          s.row_letter,
          s.seat_number,
          s.seat_type,
          s.price,
          CASE 
            WHEN bd.seat_id IS NOT NULL THEN true 
            ELSE false 
          END as is_booked
        FROM seats s
        LEFT JOIN booking_details bd ON s.id = bd.seat_id AND bd.showtime_id = ?
        ORDER BY s.row_letter, s.seat_number
      `;
      
      const [rows] = await connection.execute<mysql.RowDataPacket[]>(query, [showtimeId]);
      
      console.log('üìä [DB] ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏ö:', rows.length);

      res.status(200).json({
        success: true,
        message: '‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏ö‡∏â‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        data: rows,
        count: rows.length,
        showtimeId: showtimeId
      });

    } finally {
      connection.release();
    }

  } catch (error) {
    console.error('‚ùå [Controller] ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏£‡∏≠‡∏ö‡∏â‡∏≤‡∏¢:', error);
    
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏£‡∏≠‡∏ö‡∏â‡∏≤‡∏¢',
      error: process.env.NODE_ENV === 'development' ? error : undefined
    });
  }
};

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
 */
export const createBooking = async (req: Request, res: Response): Promise<void> => {
  try {
    const { showtimeId, customerName, customerEmail, seatIds } = req.body;

    // Validation
    if (!showtimeId || !customerName || !customerEmail || !seatIds || !Array.isArray(seatIds)) {
      res.status(400).json({
        success: false,
        message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ showtimeId, customerName, customerEmail ‡πÅ‡∏•‡∏∞ seatIds'
      });
      return;
    }

    console.log('üé´ [Controller] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á:', {
      showtimeId,
      customerName,
      customerEmail,
      seatIds
    });
    
    const connection = await pool.getConnection();
    
    try {
      // ‡πÄ‡∏£‡∏¥‡πà‡∏° transaction
      await connection.beginTransaction();

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏±‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const checkQuery = `
        SELECT seat_id 
        FROM booking_details 
        WHERE showtime_id = ? AND seat_id IN (${seatIds.map(() => '?').join(',')})
      `;
      
      const [bookedSeats] = await connection.execute<mysql.RowDataPacket[]>(
        checkQuery, 
        [showtimeId, ...seatIds]
      );

      if (bookedSeats.length > 0) {
        await connection.rollback();
        res.status(400).json({
          success: false,
          message: '‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏ö‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏à‡∏≠‡∏á‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß',
          bookedSeatIds: bookedSeats.map(row => row.seat_id)
        });
        return;
      }

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
      const [bookingResult] = await connection.execute<mysql.ResultSetHeader>(
        'INSERT INTO bookings (showtime_id, customer_name, customer_email) VALUES (?, ?, ?)',
        [showtimeId, customerName, customerEmail]
      );

      const bookingId = bookingResult.insertId;

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
      for (const seatId of seatIds) {
        await connection.execute(
          'INSERT INTO booking_details (booking_id, seat_id, showtime_id) VALUES (?, ?, ?)',
          [bookingId, seatId, showtimeId]
        );
      }

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
      const [bookingInfo] = await connection.execute<mysql.RowDataPacket[]>(`
        SELECT 
          b.id as booking_id,
          b.customer_name,
          b.customer_email,
          b.created_at,
          m.title as movie_title,
          s.time as showtime,
          GROUP_CONCAT(CONCAT(seat.row_letter, seat.seat_number) ORDER BY seat.row_letter, seat.seat_number) as seats,
          SUM(seat.price) as total_price
        FROM bookings b
        JOIN showtimes s ON b.showtime_id = s.id
        JOIN movies m ON s.movie_id = m.id
        JOIN booking_details bd ON b.id = bd.booking_id
        JOIN seats seat ON bd.seat_id = seat.id
        WHERE b.id = ?
        GROUP BY b.id
      `, [bookingId]);

      await connection.commit();

      console.log('‚úÖ [Controller] ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ID:', bookingId);

      res.status(201).json({
        success: true,
        message: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        data: bookingInfo[0]
      });

    } catch (error) {
      await connection.rollback();
      throw error;
    } finally {
      connection.release();
    }

  } catch (error) {
    console.error('‚ùå [Controller] ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á:', error);
    
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á',
      error: process.env.NODE_ENV === 'development' ? error : undefined
    });
  }
};

/**
 * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
 */
export const testConnection = async (req: Request, res: Response): Promise<void> => {
  try {
    console.log('üîß [Test] ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...');
    
    const connection = await pool.getConnection();
    
    try {
      // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö query ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
      await connection.execute('SELECT 1 as test');
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á movies
      const [tables] = await connection.execute<mysql.RowDataPacket[]>(
        'SHOW TABLES LIKE "movies"'
      );
      
      // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡∏£‡πå
      const [countResult] = await connection.execute<mysql.RowDataPacket[]>(
        'SELECT COUNT(*) as count FROM movies'
      );
      
      const movieCount = countResult[0]?.count || 0;
      
      console.log('‚úÖ [Test] ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      console.log('üìä [Test] ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡∏£‡πå‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', movieCount);
      
      res.status(200).json({
        success: true,
        message: '‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        database: dbConfig.database,
        host: dbConfig.host,
        port: dbConfig.port,
        moviesTable: tables.length > 0 ? '‡∏û‡∏ö' : '‡πÑ‡∏°‡πà‡∏û‡∏ö',
        movieCount: movieCount,
        timestamp: new Date().toISOString()
      });

    } finally {
      connection.release();
    }

  } catch (error) {
    console.error('‚ùå [Test] ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
    
    res.status(500).json({
      success: false,
      message: '‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß',
      error: error instanceof Error ? error.message : 'Unknown error',
      config: {
        host: dbConfig.host,
        port: dbConfig.port,
        database: dbConfig.database
      }
    });
  }
};
